{"ast":null,"code":"import _classCallCheck from \"/var/www/html/WebAppGenerator/prototypes/version-0.1/testcases/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/WebAppGenerator/prototypes/version-0.1/testcases/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/WebAppGenerator/prototypes/version-0.1/testcases/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/WebAppGenerator/prototypes/version-0.1/testcases/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/WebAppGenerator/prototypes/version-0.1/testcases/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/var/www/html/WebAppGenerator/prototypes/version-0.1/testcases/keygenes/src/components/pages/WhatIs.js\";\nimport React, { Component } from 'react';\nimport { Button, Container, Grid, Header, Icon, Label, List } from \"semantic-ui-react\";\nimport { Link } from \"react-router-dom\";\nimport Timeline from 'react-timeline-semantic-ui';\n\nvar WhatIs =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(WhatIs, _Component);\n\n  function WhatIs() {\n    _classCallCheck(this, WhatIs);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(WhatIs).apply(this, arguments));\n  }\n\n  _createClass(WhatIs, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h1\",\n        dividing: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14\n        },\n        __self: this\n      }, \"What is\"), React.createElement(\"p\", {\n        className: 'introText',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"KeyGenes is an algorithm to predict the identity\"), \" and determines identity scores of queried samples (test set) to a provided group of samples (training set). It uses transcriptional profiles of the queried data (test set) and matches them to sets of transcriptional profiles of organs or cell types (training set). KeyGenes uses a 10-fold cross validation on the basis of a LASSO (Least Absolute Shrinkage and Selection Operator) regression available in the R package \\u201Cglmnet\\u201D \", React.createElement(Link, {\n        to: '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18\n        },\n        __self: this\n      }, \"(Friedman et al., 2010)\"), \".\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        textAlign: 'center',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }, React.createElement(Button, {\n        as: \"div\",\n        labelPosition: \"right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }, React.createElement(Button, {\n        color: \"blue\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        name: \"github\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), \"GitHub\"), React.createElement(Label, {\n        as: \"a\",\n        basic: true,\n        pointing: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \"View our project!\")))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        className: 'timeLine',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }, React.createElement(Timeline, {\n        className: 'time-item',\n        direction: \"left\",\n        icon: \"clipboard list\",\n        title: \"Training & test set\",\n        time: \"1. Input\",\n        description: \"With use of the from a training set can be selected on a wished test set. Additional parameters can be configured.\",\n        color: \"blue\",\n        tags: ['Training-set', 'Test-set', 'Specific-input', 'Organs', 'Tissues', 'Cells', 'PSC-derived'],\n        lineHeight: 1,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }), React.createElement(Timeline, {\n        direction: \"right\",\n        icon: \"cogs\",\n        title: \"The KeyGenes algorithm\",\n        time: \"2. Run the tool\",\n        description: \"Based on the specified input the KeyGenes algorithm will be excuted\",\n        color: \"blue\",\n        tags: ['Computation', 'Run Algorithm'],\n        lineHeight: 2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(Timeline, {\n        direction: \"left\",\n        icon: \"eye\",\n        title: \"Algorithm output\",\n        time: \"3. Retrieve results\",\n        description: \"Retrieve the various forms of computation feedback\",\n        color: \"blue\",\n        tags: ['Output files', 'Heatmap', 'Identity matrix', 'Predictions', 'Classifiers genes'],\n        lineHeight: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }), React.createElement(Timeline, {\n        direction: \"right\",\n        icon: \"area graph\",\n        title: \"Visualization\",\n        time: \"4. Optional data-visualization  \",\n        description: \"Optionally a direct data-visualization can be depicted of the results.\",\n        color: \"blue\",\n        tags: ['Data-visualization', 'Graphs'],\n        lineHeight: 3,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, React.createElement(Header, {\n        as: \"h2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      }, \"Check-out the ouput\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(List, {\n        divided: true,\n        relaxed: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, React.createElement(List.Icon, {\n        name: \"chess board\",\n        size: \"large\",\n        verticalAlign: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(List.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, React.createElement(List.Header, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"A heatmap containing identity scores\"), React.createElement(List.Description, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"A PDF file (KeyGenes_Heatmap.pdf) with a heatmap containing the identity scores (between 0 and 1) of your samples matched to the samples included in the training set.\"))), React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(List.Icon, {\n        name: \"table\",\n        size: \"large\",\n        verticalAlign: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), React.createElement(List.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(List.Header, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"Identity matrix\"), React.createElement(List.Description, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, \" A text file (KeyGenes_Matrix.txt) containing a matrix with the identity scores (between 0 and 1) of the queried samples matched to the samples included in the training set.\"))), React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(List.Icon, {\n        name: \"file alternate\",\n        size: \"large\",\n        verticalAlign: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(List.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(List.Header, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, \"Sample prediction overview\"), React.createElement(List.Description, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, \"A text file (KeyGenes_Prediction.txt) with the queried samples and the sample in the training set with the highest identity score.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), \" \"))), React.createElement(List.Item, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(List.Icon, {\n        name: \"dna\",\n        size: \"large\",\n        verticalAlign: \"top\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }), React.createElement(List.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(List.Header, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, \"Sample prediction overview\"), React.createElement(List.Description, {\n        as: \"a\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"A text file (KeyGenes_Classifier.txt) containing the list of classifier genes per sample calculated from the training set used to determine the identity scores (between 0 and 1) of the queried samples matched to the samples included in the training set.\")))))));\n    }\n  }]);\n\n  return WhatIs;\n}(Component);\n\nexport default WhatIs;","map":{"version":3,"sources":["/var/www/html/WebAppGenerator/prototypes/version-0.1/testcases/keygenes/src/components/pages/WhatIs.js"],"names":["React","Component","Button","Container","Grid","Header","Icon","Label","List","Link","Timeline","WhatIs"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react'\nimport {Button, Container, Grid, Header, Icon, Label, List} from \"semantic-ui-react\";\nimport {Link} from \"react-router-dom\";\nimport Timeline from 'react-timeline-semantic-ui';\n\nclass WhatIs extends Component{\n\n    render() {\n        return(\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column>\n                        <Header as='h1' dividing>\n                            What is\n                        </Header>\n                        <p className={'introText'}>\n                            <b>KeyGenes is an algorithm to predict the identity</b> and determines identity scores of queried samples (test set) to a provided group of samples (training set). It uses transcriptional profiles of the queried data (test set) and matches them to sets of transcriptional profiles of organs or cell types (training set). KeyGenes uses a 10-fold cross validation on the basis of a LASSO (Least Absolute Shrinkage and Selection Operator) regression available in the R package “glmnet” <Link to={''}>(Friedman et al., 2010)</Link>.\n                        </p>\n\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column textAlign={'center'}>\n                        <Button as='div' labelPosition='right'>\n                            <Button color='blue'>\n                                <Icon name='github' />\n                                GitHub\n                            </Button>\n                            <Label as='a' basic  pointing='left'>\n                                View our project!\n                            </Label>\n                        </Button>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column className={'timeLine'}>\n                        <Timeline\n                            className={'time-item'}\n                            direction=\"left\"\n                            icon=\"clipboard list\"\n                            title=\"Training & test set\"\n                            time=\"1. Input\"\n                            description=\"With use of the from a training set can be selected on a wished test set. Additional parameters can be configured.\"\n                            color=\"blue\"\n                            tags={['Training-set','Test-set', 'Specific-input', 'Organs', 'Tissues', 'Cells', 'PSC-derived']}\n                            lineHeight={1}\n                        />\n                        <Timeline\n                            direction=\"right\"\n                            icon=\"cogs\"\n                            title=\"The KeyGenes algorithm\"\n                            time=\"2. Run the tool\"\n                            description=\"Based on the specified input the KeyGenes algorithm will be excuted\"\n                            color=\"blue\"\n                            tags={['Computation', 'Run Algorithm']}\n                            lineHeight={2}\n                        />\n                        <Timeline\n                            direction=\"left\"\n                            icon=\"eye\"\n                            title=\"Algorithm output\"\n                            time=\"3. Retrieve results\"\n                            description=\"Retrieve the various forms of computation feedback\"\n                            color=\"blue\"\n                            tags={['Output files', 'Heatmap', 'Identity matrix', 'Predictions', 'Classifiers genes']}\n                            lineHeight={3}\n                        />\n                        <Timeline\n                            direction=\"right\"\n                            icon=\"area graph\"\n                            title=\"Visualization\"\n                            time=\"4. Optional data-visualization  \"\n                            description=\"Optionally a direct data-visualization can be depicted of the results.\"\n                            color=\"blue\"\n                            tags={['Data-visualization','Graphs']}\n                            lineHeight={3}\n                        />\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column >\n                        <Header as='h2' >\n                            Check-out the ouput\n                        </Header>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column >\n                    <List divided relaxed>\n                        <List.Item>\n                            <List.Icon name='chess board' size='large' verticalAlign='top' />\n                            <List.Content>\n                                <List.Header as='a'>A heatmap containing identity scores</List.Header>\n                                <List.Description as='a'>A PDF file (KeyGenes_Heatmap.pdf) with a heatmap containing the identity scores (between 0 and 1) of your samples matched to the samples included in the training set.</List.Description>\n                            </List.Content>\n                        </List.Item>\n                        <List.Item>\n                            <List.Icon name='table' size='large' verticalAlign='top' />\n                            <List.Content>\n                                <List.Header as='a'>Identity matrix</List.Header>\n                                <List.Description as='a'> A text file (KeyGenes_Matrix.txt) containing a matrix with the identity scores (between 0 and 1) of the queried samples matched to the samples included in the training set.</List.Description>\n                            </List.Content>\n                        </List.Item>\n                        <List.Item>\n                            <List.Icon name='file alternate' size='large' verticalAlign='top' />\n                            <List.Content>\n                                <List.Header as='a'>Sample prediction overview</List.Header>\n                                <List.Description as='a'>A text file (KeyGenes_Prediction.txt) with the queried samples and the sample in the training set with the highest identity score.<br/><br/> </List.Description>\n                            </List.Content>\n                        </List.Item>\n                        <List.Item>\n                            <List.Icon name='dna' size='large' verticalAlign='top' />\n                            <List.Content>\n                                <List.Header as='a'>Sample prediction overview</List.Header>\n                                <List.Description as='a'>A text file (KeyGenes_Classifier.txt) containing the list of classifier genes per sample calculated from the training set used to determine the identity scores (between 0 and 1) of the queried samples matched to the samples included in the training set.</List.Description>\n                            </List.Content>\n                        </List.Item>\n                    </List>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n\n}\nexport  default  WhatIs;"]},"metadata":{},"sourceType":"module"}