{"ast":null,"code":"import _classCallCheck from \"/var/www/html/tmpVersion/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/var/www/html/tmpVersion/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/var/www/html/tmpVersion/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/var/www/html/tmpVersion/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/var/www/html/tmpVersion/keygenes/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/var/www/html/tmpVersion/keygenes/src/components/pages/Tool.js\";\nimport React, { Component } from 'react';\nimport { Button, Checkbox, Container, Form, Grid, Header, Icon, Segment, Transition } from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { required } from \"../../constants/formValidationRules\";\nimport { fileInput, selectInput, textInput } from \"../helpers/redux-form-inputs\";\n\nvar Tool =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Tool, _Component);\n\n  function Tool() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Tool);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Tool)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.onSubmit = function (formValues) {\n      _this.props.onSubmit(formValues);\n    };\n\n    _this.renderInputType = function (input, key) {\n      switch (input.type) {\n        case 'text':\n          return React.createElement(Field, {\n            key: \"field-input-\".concat(key),\n            name: input.parameter,\n            component: textInput,\n            validate: [required],\n            label: input.label,\n            inputAttr: {\n              placeholder: \"Enter the \".concat(input.label.toLowerCase()),\n              type: 'text'\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33\n            },\n            __self: this\n          });\n\n        case 'file':\n          return React.createElement(Field, {\n            key: \"field-input-\".concat(key),\n            name: input.parameter,\n            component: fileInput,\n            label: input.label,\n            inputAttr: {\n              placeholder: \"Enter the \".concat(input.label.toLowerCase())\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47\n            },\n            __self: this\n          });\n\n        case 'select':\n          return React.createElement(Field, {\n            key: \"field-input-\".concat(key),\n            name: input.parameter,\n            component: selectInput,\n            validate: [required],\n            label: input.label,\n            inputAttr: {\n              placeholder: \"Enter the \".concat(input.label.toLowerCase()),\n              options: _.values(input.options)\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 59\n            },\n            __self: this\n          });\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(Tool, [{\n    key: \"renderForm\",\n    value: function renderForm() {\n      if (this.props.inputList.length < 1) {\n        return React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, React.createElement(\"i\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 15\n          },\n          __self: this\n        }, \"Form under construction!\"));\n      } else {\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 18\n          },\n          __self: this\n        }, this.renderInputs(), React.createElement(Button, {\n          type: 'submit',\n          icon: true,\n          labelPosition: \"left\",\n          size: \"large\",\n          floated: \"right\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          name: \"paper plane\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 21\n          },\n          __self: this\n        }), \"Run!\"));\n      }\n    }\n  }, {\n    key: \"renderInputs\",\n    value: function renderInputs() {\n      var _this2 = this;\n\n      return this.props.inputList.map(function (input, key) {\n        return _this2.renderInputType(input, key);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, this.props.protocolStatus ? React.createElement(Transition, {\n        transitionOnMount: true,\n        animation: \"slide down\",\n        duration: {\n          show: 1000\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, React.createElement(Segment, {\n        color: 'green',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, \"Algorithm executed!\"), \" Dataset will be in your mail when ready\")) : '', React.createElement(Header, {\n        as: \"h1\",\n        dividing: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      }, \"Run tool\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"b\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \"KeyGenes algorithm\"), \" in order to run the algorithm  enter the dataset and configure the parameters\"))), React.createElement(Grid.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Grid.Column, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, \"Configuration\"), React.createElement(Form, {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, this.renderForm()))));\n    }\n  }]);\n\n  return Tool;\n}(Component);\n\nexport default reduxForm({\n  form: 'mainForm',\n  enableReinitialize: true\n})(Tool);","map":{"version":3,"sources":["/var/www/html/tmpVersion/keygenes/src/components/pages/Tool.js"],"names":["React","Component","Button","Checkbox","Container","Form","Grid","Header","Icon","Segment","Transition","_","Field","reduxForm","required","fileInput","selectInput","textInput","Tool","onSubmit","formValues","props","renderInputType","input","key","type","parameter","label","placeholder","toLowerCase","options","values","inputList","length","renderInputs","map","protocolStatus","show","handleSubmit","renderForm","form","enableReinitialize"],"mappings":"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","sourcesContent":["\nimport React, {Component} from 'react'\nimport {Button, Checkbox, Container, Form, Grid, Header, Icon, Segment, Transition} from \"semantic-ui-react\";\nimport _ from \"lodash\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {required} from \"../../constants/formValidationRules\";\nimport {fileInput, selectInput, textInput} from \"../helpers/redux-form-inputs\";\n\nclass Tool extends Component{\n    onSubmit = (formValues) =>{\n        this.props.onSubmit(formValues)\n    };\n    renderForm(){\n        if(this.props.inputList.length < 1){\n            return <b><i>Form under construction!</i></b>\n        }else{\n            return (\n                <div>\n                    {this.renderInputs()}\n                    <Button type={'submit'} icon labelPosition='left' size='large'  floated='right'>\n                        <Icon name='paper plane' />\n                        Run!\n                    </Button>\n                </div>\n            )\n        }\n    }\n    renderInputType = (input, key) => {\n\n        switch (input.type) {\n            case 'text':\n                return (\n                    <Field\n                        key={`field-input-${key}`}\n                        name={input.parameter}\n                        component={textInput}\n                        validate={[ required ]}\n                        label={input.label}\n                        inputAttr={{\n                            placeholder: `Enter the ${input.label.toLowerCase()}`,\n                            type:'text',\n                        }}\n                    />\n                )\n            case 'file':\n                return (\n                    <Field\n                        key={`field-input-${key}`}\n                        name={input.parameter}\n                        component={fileInput}\n                        label={input.label}\n                        inputAttr={{\n                            placeholder: `Enter the ${input.label.toLowerCase()}`\n                        }}\n                    />\n                )\n            case 'select':\n                return (\n                    <Field\n                        key={`field-input-${key}`}\n                        name={input.parameter}\n                        component={selectInput}\n                        validate={[ required ]}\n                        label={input.label}\n                        inputAttr={{\n                            placeholder: `Enter the ${input.label.toLowerCase()}`,\n                            options:_.values(input.options)\n                        }}\n                    />\n                )\n        }\n    }\n    renderInputs(){\n        return this.props.inputList.map(\n            (input, key) => this.renderInputType(input, key)\n        )\n    }\n    render() {\n        return(\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column>\n                        {(this.props.protocolStatus)?(\n                            <Transition\n                                transitionOnMount={true}\n                                animation={\"slide down\"}\n                                duration={{ show:1000 }}\n                            >\n                            <Segment color={'green'}>\n                                <b>Algorithm executed!</b> Dataset will be in your mail when ready\n                            </Segment>\n                            </Transition>\n                        ):''\n                        }\n                        <Header as='h1' dividing>\n                            Run tool\n                        </Header>\n                        <p><b>KeyGenes algorithm</b> in order to run the algorithm  enter the dataset and configure the parameters\n                        </p>\n\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column>\n                        <h3>Configuration</h3>\n                        <Form onSubmit={this.props.handleSubmit(this.onSubmit)}>\n                        {this.renderForm()}\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n\n}\nexport default reduxForm({\n    form:'mainForm',\n    enableReinitialize : true\n})(Tool)"]},"metadata":{},"sourceType":"module"}